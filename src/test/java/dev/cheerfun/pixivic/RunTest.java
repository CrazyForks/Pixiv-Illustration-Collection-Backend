package dev.cheerfun.pixivic;

import com.google.common.collect.Lists;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.PriorityQueue;

/**
 * @author echo huang
 * @version 1.0
 * @date 2019-06-28 23:05
 * @description
 */
public class RunTest {
    public static void main(String[] args) {
        Integer[] integers = new Integer[]{
                78891737, 78891802, 79135359, 79326198, 78953383, 79044320, 78884555, 79041320, 79127192, 79152382, 79284522, 78921171, 79043725, 79059957, 79144282, 79281036, 78935951, 79005189, 79127590, 78987297, 79240044, 79261868, 78898350, 79036893, 78857427, 78888866, 78914819, 79011206, 79134719, 79270049, 79324963, 78905635, 78930327, 78930439, 78930458, 79146303, 79146337, 79186420, 79356122, 78862216, 78900433, 78965891, 79095898, 79217765, 79357650, 78921194, 78936772, 78913960, 78915794, 78931471, 78947444, 78987477, 79197662, 79334699, 78905451, 79043927, 79117322, 79170254, 79082351, 79352623, 78867732, 78905760, 78973148, 79185811, 79270392, 78921567, 79028685, 79124103, 78862617, 78863340, 78863745, 78880098, 78881939, 78882017, 78898069, 78898243, 78900119, 78900949, 78912558, 78913056, 78913085, 78931749, 78931775, 78932689, 78947648, 78947697, 78947744, 78967357, 78967391, 78968513, 78990477, 78990552, 78990613, 79004268, 79005369, 79005797, 79022081, 79022791, 79023553, 79039571, 79039690, 79039746, 79054836, 79055190, 79055302, 79071092, 79072369, 79072433, 79086485, 79089534, 79089602, 79110321, 79110486, 79110567, 79129037, 79129306, 79129674, 79164894, 79182820, 79199997, 79201359, 79284031, 78999559, 79094184, 79199320, 79293523, 78913122, 79282704, 78873054, 78896307, 78910039, 78928363, 78948456, 78967005, 78987182, 79006418, 79020738, 79037045, 79058874, 79068407, 79085399, 79102903, 79118656, 79134884, 79152000, 79181939, 79209020, 79234566, 79263174, 79299625, 79326264, 79342294, 79109458, 78946550, 79165034, 79127923, 79059971, 79117069, 79306152, 79306158, 79306220, 78905175, 78927569, 79059955, 79168568, 79203687, 78896991, 79350890, 78898632, 78899801, 79003751, 79101079, 79231608, 78900773, 79116518, 79209612, 78952902, 79238015, 79132530, 79140981, 79148760, 79278428, 78899024, 79146984, 78994449, 79386892, 78936706, 79060034, 79089843, 79059952, 79288105, 79005225, 79200355, 79351415, 79127594, 79140920, 79158062, 79174312, 79192128, 79211923, 79234075, 79247425, 79258010, 79277857, 79293572, 79320481, 79342232, 79354180, 78906982, 79078004, 79204072, 79290386, 79362670, 78942244, 79330416, 79346649, 78940644, 79156523, 79270027, 79342268, 78905804, 79077368, 79152499, 78888869, 79011328, 79325109, 78914499, 78886187, 79147532, 79265523, 78867596, 78905115, 78936671, 78994424, 79011165, 79043734, 79076100, 79117055, 79151589, 79185569, 79249752, 79288082, 79324019, 79363210, 78896902, 78937102, 78937174, 78866532, 79074642, 79321302, 79169339, 79272420, 78854212, 78922228, 79059521, 79064221, 79191506, 79329501, 78901270, 79107642, 79177067, 79192865, 79263234, 79059958, 79095347, 79117123, 79134629, 79168539, 79306177, 78872977, 78999626, 79055225, 79122407, 79275542, 79251861, 78865771, 78888304, 78921126, 78951315, 78994736, 79027038, 79043064, 79075905, 79151544, 79250581, 79364189, 78867718, 78921386, 78973455, 79027527, 79076360, 79136838, 79186045, 79250058, 79306523, 78969121, 79136298, 78937178, 79044250, 79151682, 79118045, 78891355, 78891369, 78891392, 78891478, 78891551, 78891629, 79170175, 79307094, 79074423, 79074655, 79075352, 79103379, 79113775, 79122418, 79122529, 79131144, 79148670, 79274658, 79276658, 79337705, 79027418, 79224979, 78941225, 78941234, 78998341, 79143647, 79299619, 78888856, 78936914, 79027412, 79076094, 79089942, 79363208, 78889447, 78936787, 78936934, 79060079, 79185705, 79203805, 79324450, 79077540, 79152792, 78888816, 78952932, 79027411, 79076064, 79168507, 79249813, 78950205, 78953807, 79093559, 79100177, 79346751, 79053224, 79125263, 79298145, 79185996, 79226609, 78921160, 79073589, 79134581, 78890368, 79014424, 79048120, 79276666, 78878434, 78929557, 79008984, 79086606, 79179720, 79217535, 79129236, 78866343, 78898781, 78913824, 78931392, 79010752, 79038955, 78864446, 79054910, 79088106, 79218306, 79350883, 78984611, 79053216, 79066789, 79169849, 79301052, 78867750, 78921134, 78972960, 79151591, 79225002, 79324029, 78891821, 78936687, 78869670, 78907412, 78995758, 79013865, 79013895, 79077856, 79078116, 79154542, 79228884, 79327069, 79342625, 78964864, 79075144, 79179136, 79299728, 79321822, 79011401, 79134764, 79363351, 78973009, 79117133, 78899322, 78966505, 79021545, 79179651, 79244580, 79282307, 78910566, 78910579, 78889256, 78936726, 79249850, 78905138, 78953217, 79203682, 79270046, 79288090, 78867565, 78921318, 78972939, 79027429, 79076087, 79134570, 79203683, 79288087, 78867699, 78905159, 78936708, 78972967, 79011218, 79076213, 79151602, 79203693, 79249786, 79288095, 79341686, 78858727, 78885691, 78908929, 78932711, 78996496, 79015078, 79137087, 79173266, 79209737, 78891574, 79005182, 79153567, 79172086, 79184031, 79207879, 79228643, 79254189, 79272639, 79292487
       //78891737,78891802,79135359,79326198,78953383,79044320,78884555,79041320,79127192,79152382,79284522,78921171,79043725,79059957,79144282,79281036,78935951,79005189,79127590,78987297,79240044,79261868,78898350,79036893,78857427,78888866,78914819,79011206,79134719,79270049,79324963,78905635,78930327,78930439,78930458,79146303,79146337,79186420,79356122,78862216,78900433,78965891,79095898,79217765,79357650,78921194,78936772,78913960,78915794,78931471,78947444,78987477,79197662,79334699,78905451,79043927,79117322,79170254,79082351,79352623,78867732,78905760,78973148,79185811,79270392,78921567,79028685,79124103,78862617,78863340,78863745,78880098,78881939,78882017,78898069,78898243,78900119,78900949,78912558,78913056,78913085,78931749,78931775,78932689,78947648,78947697,78947744,78967357,78967391,78968513,78990477,78990552,78990613,79004268,79005369,79005797,79022081,79022791,79023553,79039571,79039690,79039746,79054836,79055190,79055302,79071092,79072369,79072433,79086485,79089534,79089602,79110321,79110486,79110567,79129037,79129306,79129674,79164894,79182820,79199997,79201359,79284031,78999559,79094184,79199320,79293523,78913122,79282704,78873054,78896307,78910039,78928363,78948456,78967005,78987182,79006418,79020738,79037045,79058874,79068407,79085399,79102903,79118656,79134884,79152000,79181939,79209020,79234566,79263174,79299625,79326264,79342294,79109458,78946550,79165034,79127923,79059971,79117069,79306152,79306158,79306220,78905175,78927569,79059955,79168568,79203687,78896991,79350890,78898632,78899801,79003751,79101079,79231608,78900773,79116518,79209612,78952902,79238015,79132530,79140981,79148760,79278428,78899024,79146984,78994449,79386892,78936706,79060034,79089843,79059952,79288105,79005225,79200355,79351415,79127594,79140920,79158062,79174312,79192128,79211923,79234075,79247425,79258010,79277857,79293572,79320481,79342232,79354180,78906982,79078004,79204072,79290386,79362670,78942244,79330416,79346649,78940644,79156523,79270027,79342268,78905804,79077368,79152499,78888869,79011328,79325109,78914499,78886187,79147532,79265523,78867596,78905115,78936671,78994424,79011165,79043734,79076100,79117055,79151589,79185569,79249752,79288082,79324019,79363210,78896902,78937102,78937174,78866532,79074642,79321302,79169339,79272420,78854212,78922228,79059521,79064221,79191506,79329501,78901270,79107642,79177067,79192865,79263234,79059958,79095347,79117123,79134629,79168539,79306177,78872977,78999626,79055225,79122407,79275542,79251861,78865771,78888304,78921126,78951315,78994736,79027038,79043064,79075905,79151544,79250581,79364189,78867718,78921386,78973455,79027527,79076360,79136838,79186045,79250058,79306523,78969121,79136298,78937178,79044250,79151682,79118045,78891355,78891369,78891392,78891478,78891551,78891629,79170175,79307094,79074423,79074655,79075352,79103379,79113775,79122418,79122529,79131144,79148670,79274658,79276658,79337705,79027418,79224979,78941225,78941234,78998341,79143647,79299619,78888856,78936914,79027412,79076094,79089942,79363208,78889447,78936787,78936934,79060079,79185705,79203805,79324450,79077540,79152792,78888816,78952932,79027411,79076064,79168507,79249813,78950205,78953807,79093559,79100177,79346751,79053224,79125263,79298145,79185996,79226609,78921160,79073589,79134581,78890368,79014424,79048120,79276666,78878434,78929557,79008984,79086606,79179720,79217535,79129236,78866343,78898781,78913824,78931392,79010752,79038955,78864446,79054910,79088106,79218306,79350883,78984611,79053216,79066789,79169849,79301052,78867750,78921134,78972960,79151591,79225002,79324029,78891821,78936687,78869670,78907412,78995758,79013865,79013895,79077856,79078116,79154542,79228884,79327069,79342625,78964864,79075144,79179136,79299728,79321822,79011401,79134764,79363351,78973009,79117133,78899322,78966505,79021545,79179651,79244580,79282307,78910566,78910579,78889256,78936726,79249850,78905138,78953217,79203682,79270046,79288090,78867565,78921318,78972939,79027429,79076087,79134570,79203683,79288087,78867699,78905159,78936708,78972967,79011218,79076213,79151602,79203693,79249786,79288095,79341686,78858727,78885691,78908929,78932711,78996496,79015078,79137087,79173266,79209737,78891574,79005182,79153567,79172086,79184031,79207879,79228643,79254189,79272639,79292487
        };
        List<List<Integer>> split = split(Arrays.asList(integers));
        System.out.println(mergekSortedArrays(split));
        split.forEach(System.out::println);
    }

    private static List<List<Integer>> split(List<Integer> illustrationIdList) {
        List<List<Integer>> result = new ArrayList<>();
        int size = illustrationIdList.size();
        if (size > 1) {
            int from = 0;
            int to = 1;
            for (; to < size; to++) {
                if (to == size - 1) {
                    result.add(Lists.reverse(illustrationIdList.subList(from, to + 1)));
                    break;
                } else if (to != size - 1 && illustrationIdList.get(to) > illustrationIdList.get(to + 1)) {
                    result.add(Lists.reverse(illustrationIdList.subList(from, to + 1)));
                    from = to + 1;
                }

            }
        }
        return result;
    }

    private static class NewInteger {
        int value, row, col;

        public NewInteger(int value, int row, int col) {
            this.value = value;
            this.row = row;
            this.col = col;
        }
    }

    public static List<Integer> mergekSortedArrays(List<List<Integer>> arrays) {
        ArrayList<Integer> list = new ArrayList<>();
        if (arrays == null || arrays.size() == 0 || arrays.get(0).size() == 0) {
            return list;
        }
        PriorityQueue<NewInteger> pq = new PriorityQueue<>(arrays.size(), (x, y) -> x.value > y.value ? -1 : 1);

        for (int i = 0; i < arrays.size(); i++) {
            pq.offer(new NewInteger(arrays.get(i).get(0), i, 0));
        }
        while (list.size()<100&&!pq.isEmpty()) {
            NewInteger min = pq.poll();
            if (min.col + 1 < arrays.get(min.row).size()) {
                pq.offer(new NewInteger(arrays.get(min.row).get(min.col + 1), min.row, min.col + 1));
            }
            list.add(min.value);
        }

        return list;
    }

}
